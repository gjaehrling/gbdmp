dotchart(PaymentDuration,labels=row.names(SalesOrders2$PaymentDuration),cex=.6,
main="Payments per day",
xlab="Transaction value")
# create time series:
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
#abline(h=median(Price.ts$x), col="blue")
#ts <- ts(t(SalesOrders2$TotalPrice))
ts <- ts(t(Price.ts$x))
plot(ts[1,],type="l",col="black")
hist(ts, breaks=50)
yfit<-dnorm(seq(min(SalesOrders2$TotalPrice),max(SalesOrders2$TotalPrice),length=40)
,mean=mean(SalesOrders2$TotalPrice),
sd=sd(SalesOrders2$TotalPrice))
# calculate forecast:
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=100))
fc <- forecast(fit)
plot(fc)
abline(h=mean(Price.ts$x), col="red")
hist(ts, breaks=50, col="grey")
# load libraries:
library(tseries)
library(forecast)
# load the data:
SalesOrders2 <- read.csv("SalesOrders2.csv", header = TRUE, sep = "\t")
SalesOrders2$DeliveryDate <- as.Date(SalesOrders2$DeliveryDate, format="%Y-%m-%d")
names(SalesOrders2)
head(SalesOrders2, n=10)
summary(SalesOrders2)
str(SalesOrders2)
# plot some data:
PaymentDuration <- SalesOrders2$PaymentDuration
str(PaymentDuration)
#plot(PaymentDuration, type="o", col="blue")
dotchart(PaymentDuration,labels=row.names(SalesOrders2$PaymentDuration),cex=.6,
main="Payments per day",
xlab="Transaction value")
ts <- ts(t(Price.ts$x))
plot(ts[1,],type="l",col="black")
hist(ts, breaks=50, col="grey")
hist(ts, breaks=50, col="grey", main="Distribution of prices")
hist(ts, breaks=100, col="grey", main="Distribution of prices")
# create time series:
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
#abline(h=median(Price.ts$x), col="blue")
#ts <- ts(t(SalesOrders2$TotalPrice))
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=100))
fc <- forecast(fit)
plot(fc)
abline(h=mean(Price.ts$x), col="red")
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
plot(fc)
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
#abline(h=median(Price.ts$x), col="blue")
# calculate forecast:
plot(ts[1,],type="l",col="black")
plot(ts[1,],type="l",col="black")
plot(ts[1,],type="l",col="black")
abline(h=mean(Price.ts$x), col="red")
abline(h=mean(Price.ts$x), col="black")
abline(h=mean(Price.ts$x), col="grey")
auto.arima(Price.ts$x)
abline(h=mean(Price.ts$x), col="white")
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=100))
fc <- forecast(fit)
plot(fc)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="red")
abline(h=mean(Price.ts$x), col="white")
abline(h=mean(Price.ts$x), col="white")
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
hist(ts, breaks=100, col="grey", main="Distribution of order values")
install.packages("KernSmooth")
library(KernSmooth)
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
# load libraries:
library(tseries)
library(forecast)
# load the data:
SalesOrders2 <- read.csv("SalesOrders2.csv", header = TRUE, sep = "\t")
SalesOrders2$DeliveryDate <- as.Date(SalesOrders2$DeliveryDate, format="%Y-%m-%d")
names(SalesOrders2)
head(SalesOrders2, n=10)
summary(SalesOrders2)
str(SalesOrders2)
# plot some data:
PaymentDuration <- SalesOrders2$PaymentDuration
str(PaymentDuration)
#plot(PaymentDuration, type="o", col="blue")
dotchart(PaymentDuration,labels=row.names(SalesOrders2$PaymentDuration),cex=.6,
main="Payments per day",
xlab="Transaction value")
ts <- ts(t(Price.ts$x))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
# create time series:
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
plot(ts[1,],type="l",col="black")
abline(h=mean(Price.ts$x), col="white")
# calculate forecast:
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=100))
fc <- forecast(fit)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
dotchart(PaymentDuration,labels=row.names(SalesOrders2$PaymentDuration),cex=.6,
main="Payments per day",
xlab="Transaction value")
ts <- ts(t(Price.ts$x))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
# alternative plot:
plot(ts[1,],type="l",col="black")
abline(h=mean(Price.ts$x), col="white")
# calculate forecast:
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=100))
fc <- forecast(fit)
library(tseries)
library(forecast)
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=100))
fc <- forecast(fit)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=120))
fc <- forecast(fit)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=80))
fc <- forecast(fit)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
library(tseries)
library(forecast)
SalesOrders2 <- read.csv("SalesOrders2.csv", header = TRUE, sep = "\t")
SalesOrders2$DeliveryDate <- as.Date(SalesOrders2$DeliveryDate, format="%Y-%m-%d")
names(SalesOrders2)
head(SalesOrders2, n=10)
summary(SalesOrders2)
str(SalesOrders2)
# plot some data:
PaymentDuration <- SalesOrders2$PaymentDuration
str(PaymentDuration)
#plot(PaymentDuration, type="o", col="blue")
ts <- ts(t(Price.ts$x))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
plot(ts[1,],type="l",col="black")
abline(h=mean(Price.ts$x), col="white")
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=80))
fc <- forecast(fit)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
summary(Price.ts$x )
plot(fc, main="Forecast from ARIMA", xlab="number of days", ylab="odered value",
xlim=c(800, 1200), ylim=c(0, 5000000))
xlim=c(800, 1100), ylim=c(0, 5000000))
plot(fc, main="Forecast from ARIMA", xlab="number of days", ylab="odered value",
xlim=c(800, 1100), ylim=c(0, 5000000))
abline(h=mean(Price.ts$x), col="white")
plot(fc, main="Forecast from ARIMA", xlab="number of days", ylab="odered value",
xlim=c(800, 1100))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
plot(ts[1,],type="l",col="black")
abline(h=mean(Price.ts$x), col="white")
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=80))
fc <- forecast(fit)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
plot(fc, main="Forecast from ARIMA model (details)", xlab="number of days", ylab="odered value",
xlim=c(800, 1100))
abline(h=mean(Price.ts$x), col="white")
abline(h=mean(Price.ts$x), col="red")
# load libraries:
library(tseries)
library(forecast)
# load the data:
SalesOrders2 <- read.csv("SalesOrders2.csv", header = TRUE, sep = "\t")
SalesOrders2$DeliveryDate <- as.Date(SalesOrders2$DeliveryDate, format="%Y-%m-%d")
names(SalesOrders2)
head(SalesOrders2, n=10)
summary(SalesOrders2)
str(SalesOrders2)
# plot some data:
PaymentDuration <- SalesOrders2$PaymentDuration
str(PaymentDuration)
ts <- ts(t(Price.ts$x))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
ts <- ts(t(Price.ts$x))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
# load libraries:
library(tseries)
library(forecast)
# load the data:
SalesOrders2 <- read.csv("SalesOrders2.csv", header = TRUE, sep = "\t")
SalesOrders2$DeliveryDate <- as.Date(SalesOrders2$DeliveryDate, format="%Y-%m-%d")
names(SalesOrders2)
head(SalesOrders2, n=10)
summary(SalesOrders2)
str(SalesOrders2)
# plot some data:
PaymentDuration <- SalesOrders2$PaymentDuration
str(PaymentDuration)
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
ts <- ts(t(Price.ts$x))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
# alternative plot:
plot(ts[1,],type="l",col="black")
abline(h=mean(Price.ts$x), col="white")
# calculate forecast:
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=80))
fc <- forecast(fit)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
# plot with limited x-axis:
plot(fc, main="Forecast from ARIMA model (details)", xlab="number of days", ylab="odered value",
xlim=c(800, 1100))
abline(h=mean(Price.ts$x), col="red")
install.packages("textcat")
library(textcat)
textcat(c("This is english", "Das ist ein deutscher Satz", "Cest une example fraicaise"))
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
plot(fc, main="Forecast from ARIMA model (details)", xlab="number of days", ylab="odered value",
xlim=c(800, 900))
abline(h=mean(Price.ts$x), col="red")
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
xlim=c(800, 1000))
plot(fc, main="Forecast from ARIMA model (details)", xlab="number of days", ylab="odered value",
xlim=c(800, 1000))
abline(h=mean(Price.ts$x), col="red")
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
summary(SalesOrders2$DeliveryDate)
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
install.packages("nutshell")
library(nutshell)
data(births2006.smpl)
show(data)
View(births2006.smpl)
library(lattice)
births2006.smpl[1:5,]
str(data)
str(births2006.smpl)
summary(births2006.smpl)
?data
births2006.smpl[1:5,]
dim(births2006.smpl)
summary(births2006.smpl)
births.dow
births.dow <- table(births2006.smpl$DOB_WK)
births.dow
barchart(births.dow, ylab="Day of week", col="black")
getwd()
setwd("~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2")
getwd()
setwd("~/Dropbox/user_gerd/programme/data_mining/Data_Mining_and_Business_Analytics")
dir()
dir()
ls()
barchart(births.dow, ylab="Day of week", col="black")
dob.dm.tbl <- table(WK=births2006.smpl$DOB_WK, MM=births2006.smpl$DMETH_REC)
dob.dm.tbl
dob.dm.tbl <- dob.dm.tbl[, -2]
dob.dm.tbl
trellis.device()
barchart(dob.dm.tbl, ylab="Day of Week")
barchart(dob.dm.tbl, horizontal="FALSE", groups="FALSE", xlab="Day of Week", col="black")
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lappy(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
class(unique_vals)
sapply(unique_vals, length)
unique_vals <- sapply(flags, unique)
sapply(flags, unique)
lappy(unique_vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
source('~/Dropbox/user_gerd/programme/data_mining/R/SalesOrders2/SalesOrdersForecast.R', echo=TRUE)
# load libraries:
library(tseries)
library(forecast)
# load the data:
SalesOrders2 <- read.csv("SalesOrders2.csv", header = TRUE, sep = "\t")
SalesOrders2$DeliveryDate <- as.Date(SalesOrders2$DeliveryDate, format="%Y-%m-%d")
names(SalesOrders2)
head(SalesOrders2, n=10)
summary(SalesOrders2)
str(SalesOrders2)
# plot some data:
PaymentDuration <- SalesOrders2$PaymentDuration
str(PaymentDuration)
#plot(PaymentDuration, type="o", col="blue")
dotchart(PaymentDuration,labels=row.names(SalesOrders2$PaymentDuration),cex=.6,
main="Payments per day",
xlab="Transaction value")
# create time series:
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
ts <- ts(t(Price.ts$x))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
# alternative plot:
plot(ts[1,],type="l",col="black")
abline(h=mean(Price.ts$x), col="white")
# calculate forecast:
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=80))
fc <- forecast(fit)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
# plot with limited x-axis:
plot(fc, main="Forecast from ARIMA model (details)", xlab="number of days", ylab="odered value",
xlim=c(800, 1000))
abline(h=mean(Price.ts$x), col="red")
getwd()
# load libraries:
library(tseries)
library(forecast)
install.packages("tseries")
library(tseries)
library(forecast)
install.packages("forecast")
library(tseries)
library(forecast)
# load the data:
SalesOrders2 <- read.csv("SalesOrders2.csv", header = TRUE, sep = "\t")
SalesOrders2$DeliveryDate <- as.Date(SalesOrders2$DeliveryDate, format="%Y-%m-%d")
names(SalesOrders2)
head(SalesOrders2, n=10)
summary(SalesOrders2)
str(SalesOrders2)
# plot some data:
PaymentDuration <- SalesOrders2$PaymentDuration
str(PaymentDuration)
dotchart(PaymentDuration,labels=row.names(SalesOrders2$PaymentDuration),cex=.6,
main="Payments per day",
xlab="Transaction value")
# create time series:
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
ts <- ts(t(Price.ts$x))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
# alternative plot:
plot(ts[1,],type="l",col="black")
abline(h=mean(Price.ts$x), col="white")
# calculate forecast:
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=80))
fc <- forecast(fit)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
# plot with limited x-axis:
plot(fc, main="Forecast from ARIMA model (details)", xlab="number of days", ylab="odered value",
xlim=c(800, 1000))
abline(h=mean(Price.ts$x), col="red")
SalesOrders2 <- read.csv("SalesOrders2.csv", header = TRUE, sep = "\t")
library(tseries)
library(forecast)
# load the data:
SalesOrders2 <- read.csv("SalesOrders2.csv", header = TRUE, sep = "\t")
SalesOrders2$DeliveryDate <- as.Date(SalesOrders2$DeliveryDate, format="%Y-%m-%d")
names(SalesOrders2)
head(SalesOrders2, n=10)
summary(SalesOrders2)
str(SalesOrders2)
# plot some data:
PaymentDuration <- SalesOrders2$PaymentDuration
str(PaymentDuration)
#plot(PaymentDuration, type="o", col="blue")
dotchart(PaymentDuration,labels=row.names(SalesOrders2$PaymentDuration),cex=.6,
main="Payments per day",
xlab="Transaction value")
# create time series:
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
ts <- ts(t(Price.ts$x))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
# alternative plot:
plot(ts[1,],type="l",col="black")
abline(h=mean(Price.ts$x), col="white")
# calculate forecast:
auto.arima(Price.ts$x)
fit <- arima(Price.ts$x, seasonal = list(order=c(0,1,0), period=80))
fc <- forecast(fit)
plot(fc, main="Forecast from ARIMA")
abline(h=mean(Price.ts$x), col="white")
# plot with limited x-axis:
plot(fc, main="Forecast from ARIMA model (details)", xlab="number of days", ylab="odered value",
xlim=c(800, 1000))
abline(h=mean(Price.ts$x), col="red")
library(tseries)
install.packages("tseries")
library(tseries)
install.packages("forecast")
install.packages("RcppArmadillo")
install.packages("forecast")
library(forecast)
SalesOrders2 <- read.csv("SalesOrders2.csv", header = TRUE, sep = "\t")
SalesOrders2$DeliveryDate <- as.Date(SalesOrders2$DeliveryDate, format="%Y-%m-%d")
names(SalesOrders2)
head(SalesOrders2, n=10)
summary(SalesOrders2)
str(SalesOrders2)
# plot some data:
PaymentDuration <- SalesOrders2$PaymentDuration
str(PaymentDuration)
dotchart(PaymentDuration,labels=row.names(SalesOrders2$PaymentDuration),cex=.6,
main="Payments per day",
xlab="Transaction value")
# create time series:
Price.ts <- aggregate(x=SalesOrders2$TotalPrice,
by=list(SalesOrders2$DeliveryDate),
FUN="sum")
str(Price.ts[1:3, ])
ts <- ts(t(Price.ts$x))
hist(ts, breaks=100, col="grey", main="Distribution of order values")
plot(Price.ts$Group.1, Price.ts$x, type="o", col="black")
abline(h=mean(Price.ts$x), col="red")
# alternative plot:
plot(ts[1,],type="l",col="black")
abline(h=mean(Price.ts$x), col="white")
# calculate forecast:
auto.arima(Price.ts$x)
install.packages("arima")
install.packages("forecast")
install.packages("RcppArmadillo")
