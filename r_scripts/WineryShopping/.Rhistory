g<-c("f","m","m","f","f","f","m")
factor(g)
g<-factor(g)
g
g[2]
help(other)
??other
other.g<-factor(c("m","m","m","m")-levels=c("f","m"))
other.g<-factor(c("m","m","m","m")-levels=c("f","m")))
other.g<-factor(c("m","m","m","m"),levels=c("f","m")))
other.g<-factor(c("m","m","m","m"),levels=c("f", + "m")))
other.g<-factor(c("m","m","m","m"),levels=c("f", + "m"))
other.g<-factor(c("m","m","m","m"),levels=c("f", "m"))
other.g
table(g)
table(other.g)
table(a)
a<-factor(c('adult',adult','juvenile',adult',adult','juvenile','adult','juvenile'))
a<-factor(c('adult','adult','juvenile','adult','adult','juvenile','adult','juvenile'))
table(a,g)
g
g<-factor(c('f','m','m','m','f','m','f','m','f','f'))
g
table(a,g)
a
a<-factor(c('adult','adult','juvenile','juvenile','adult','adult','adult','juvenile','adult','juvenile'))
table(a,g)
a
table(a)
table(g)
table(a,g)
t<-table(a,)
t<-table(a,g)
margin.table(t,1)
margin.table(t,2)
prop.table(t,1)
prop.table(t,1)
prop.table(t,2)
prop.table(t)
prop.table(t)*100
q()
x<-1:100
x
x<-10:15-1
x
x<-(10:15)-1
x
x<-10:(15-1)
x
x<-5:0
x
x<-seq(-4,1,0.5)
x
x<-seq(from=1,to=5,by=0.2)
x
x<-seq(from=1,to=5,length=2,by=0.2)
x<-seq(from=1,to=5,length=2)
x
x<-seq(length=5,from=-1,length=2)
x<-seq(length=5,from=-1,by=0.2)
x
x
x<-gl(3,5)
x
x<-gl(2,5,labels=c("male","female"))
x
mysql -u root -p
library(DMwR)
head(algae)
quit
q()
rnorm(10)
x<-c(0,-3,4,-1,,45,90,-5)
x<-c(0,-3,4,-1,45,90,-5)
x>0
x[x>0]
y<-c(4,6)
y
x[c(4,6)]
x[1:3]
x[y]
x[0]
x[1]
x[2]
x
x[-2]
x[-(1:3)]
pH<-c(4.5,7,7.3,8.2,6.3)
names(pH)<-c("area1", "area2", "mud", "dam", "middle")
pH
pH["mud"]
pH["mud", "area1"]
pH[c("mud", "area1")]
pH[c("mud", "area1")]
pH[]
x[]
x[]<-0
x[]
x<-0
x
m<-c(45,23,66,77,33,44,56,12,78,23)
m
dim(m)->c(2,5)
dim(m)<-c(2,5)
m
m<-matrix(c(45,23,66,77,33,44,56,12,78,23),2,5)
m
m<-matrix(c(45,23,66,77,33,44,56,12,78,23),2,5,byrow=T)
m
m[2m3]
m[2,3]
m[-2,1]
m
m[1,1]
m[1,c(3,5)]
m[1,-c(3,5)]
m[1,]
m[,4]
m[3,]
m[2,]
q()
summary(algae)
library(DMwR)
summary(algae)
q()
summary(algae)
library(DMwR)
hist(algae$mxPH, prob=T)
q()
library(rattle)
crv$rattleUI <- "rattle_macosx.ui"
rattle()
library(DMwR)
rattle()
summary(algae)
hist(algae$mxPH)
hist(algae$mxPH, prob=T)
hist(algae$mxPH, prob=T, ylim=0:1)
hist(algae$mxPH, prob=T, ylim=0:1, main="Histogramm of maximum PH-values")
lines(density(algae$mxPH), na.rm=T)
lines(density(algae$mxPH, na.rm=T)
)
rug(jitter(algae$mxPH, na.rm=T))
rug(jitter(algae$mxPH))
qqPlot(algae$mxPH)
library(car)
qqPlot(algae$mxPH)
car(mfrow=c(1,2))
libaray(car)
libraray(car)
library(car)
car(mfrow=c(1,2))
par(mfrow=c(1,2))
hist(algae$mxPH, prob=T, ylim=0:1, main="Histogramm of maximum PH-values")
lines(density(algae$mxPH, na.rm=T))
rug(jitter(algae$mxPH))
qqPlot(algae$mxPH)
par(mfrow=c(1,1))
plot(algae$mxPH)
ablines(h=mean(algae$mxPH), lty=1)
adlines(h=mean(algae$mxPH), lty=1)
abline(h=mean(algae$mxPH), lty=1)
abline(h=mean(algae$mxPH, na.rm=T), lty=1)
abline(h=median(algae$mxPH, na.rm=T), lty=3)
abline(h=sd(algae$mxPH, na.rm=T), lty=2)
summary(algae)
libaray(DMwR)
libraray(DMwR)
library(DMwR)
summary(algae)
libaray(car)
library(car)
par(mfrow=c(1,2))
hist(algae$mxPH, main="Histogramm max PH", ylim=0:1)
hist(algae$mxPH, prob=T, main="Histogramm max PH", ylim=0:1)
hist(algae$mxPH, prob=T, main="Histogramm max PH", ylim=0:1)
par(mfrow=c(1,2))
hist(algae$mxPH, prob=T, main="Histogramm max PH", ylim=0:1)
lines(density(algae$mxPH, na.rm=T))
rug(jitter(algae$mxPH))
qqPlot(algae$mxPH)
par(mfrow(1,1))
par(mfrow=c(1,1))
plot(algae$mxPH)
ablines(h=mean(algae$mxPH), lty=1)
abline(h=mean(algae$mxPH), lty=1)
abline(h=mean(algae$mxPH, na.rm=T), lty=1)
abline(h=mean(algae$mxPH, na.rm=T), lty=2)
par(mfrow=c(1,1))
plot(algae$mxPH)
abline(h=mean(algae$mxPH, na.rm=T), lty=2)
library(Hmisc)
min02<-equal.count(na.omit(algae$mn02), number=4, overlap=1/5)
min02<-equal.count(na.omit(algae$mn02))
min01<-equal.count(algae$nm02)
min01<-equal.count(na.omit(algae$nm02))
min01<-equal.count(na.omit(algae$mn02))
min01<-equal.count(na.omit(algae$mn02), number=4,overlap=1/5)
summary(algae)
min02<-equal.count(na.omit(algae$mn02), number=4,overlap=1/5)
stripplot(season ~ a3/min02, data=algae[!is.na(algae$mn02),])
min02<-equal.count(na.omit(algae$mnO2), number=4,overlap=1/5)
stripplot(season ~ a3/min02, data=algae[!is.na(algae$mnO2),])
library(lattice)
bwplot(size ~ a1, data=algae, ylab="river Size", xlab="Algal A1")
library(Hmisc)
bwplot(size ~ a1, data=algae, panel=panel.bpplot, probs=seq(.01,.49,by=.01), datadensity=TRUE, ylab="river Size", xlab="Algal A1")
summary(algae)
libraries(DWmR)
library(DWmR)
library("DWmR")
library(DMwR)
install.package("DMwR")
install.packages("DMwR")
library(DMwR)
summary(algae)
install.packages("Rcmdr")
library(Rcmdr)
history(algae$mxPH)
hist(algae$mxPH, prob=T)
install.packates("rattle")
install.packages("rattle")
library(rattle)
rattle()
library(DMwR)
summary(algae)
installed.packages()
summary(algae)
par(mfrow=c(1,2))
hist(algae$mxPH, prob=T, main="Histogramm max PH", ylim=0:1)
lines(density(algae$mxPH, na.rm=T))
rug(jitter(algae$mxPH))
qqPlot(algae$mxPH)
qqPlot(algae$mxPH)
install.packages(qqPlot)
qq.plot(algae$mxPH)
library(car)
qq.plot(algae$mxPH)
ppPlot(algae$mxPH)
library(car)
ppPlot(algae$mxPH)
qqPlot(algae$mxPH)
par(mfrow=c(1,2))
hist(algae$mxPH, prob=T, main="Histogramm max PH", ylim=0:1)
lines(density(algae$mxPH, na.rm=T))
rug(jitter(algae$mxPH))
qqPlot(algae$mxPH)
data(algae)
View(algae)
min02<-equal.count(na.omit(algae$mn02))
min01<-equal.count(algae$nm02)
min01<-equal.count(na.omit(algae$mn02), number=4,overlap=1/5)
library(Hmisc)
min01<-equal.count(na.omit(algae$mn02), number=4,overlap=1/5)
plot(algae$mxPH)
par(mfrow=c(1,1))
plot(algae$mxPH)
ablines(h=mean(algae$mxPH), lty=1)
abline(h=mean(algae$mxPH), lty=1)
abline(h=mean(algae$mxPH, na.rm=T), lty=1)
abline(h=mean(algae$mxPH, na.rm=T), lty=2)
abline(h=mean(algae$mxPH), lty=1)
abline(h=mean(algae$mxPH, na.rm=T), lty=1)
abline(h=mean(algae$mxPH, na.rm=T), lty=2)
crv$rattleUI <- "rattle_macosx.ui"
bwplot(size ~ a1, data=algae, panel=panel.bpplot, probs=seq(.01,.49,by=.01), datadensity=TRUE, ylab="river Size", xlab="Algal A1")
bwplot(size ~ a1, data=algae, ylab="river Size", xlab="Algal A1")
stripplot(season ~ a3/min02, data=algae[!is.na(algae$mnO2),])
stripplot(season ~ a3/min02, data=algae[!is.na(algae$mn02),])
min02<-equal.count(na.omit(algae$mn02), number=4,overlap=1/5)
min02<-equal.count(na.omit(algae$mno2), number=4,overlap=1/5)
min02<-equal.count(na.omit(algae$mnO2), number=4,overlap=1/5)
min02<-equal.count(na.omit(algae$mnO2), number=4,overlap=1/5)
stripplot(season ~ a3/min02, data=algae[!is.na(algae$mnO2),])
library(lattice)
equal.count(na.omit(algae$mnO2), number=4,overlap=1/5)
help(qqPlot)
qqPlot(algae$mxPH)
summary(algae)
hist(algae$mxPH, prob=T)
data(algae)
library(DMwR)
data(algae)
cor(algae[, 4:18], use="complete.obs")
symnum(cor(algae[, 4:18], use="complete.obs"))
algae<-knnImputation(algae, k=10, meth="median")
histogram(~mxPH | size * speed, data=algae)
histogram(~mxPH | size * speed, data=algae, jitter=T)
stripplot(size ~ mxPH | size * speed, data=algae, jitter=T)
stripplot(size ~ mxPH | speed, data=algae, jitter=T)
data(algae)
algae<-algae[-manyNAs(algae),]
clean.algae <-knnImputation(algae, k=10)
data(algae)
data(clean.algae)
lm.a1<-lm(a1 ~ ., data=clean.algae[,1:12])
summary(lm.a1)
data(lm.a1)
summary(lm.a1)
lm.a1<-lm(a1 ~ ., data=clean.algae[,1:12])
summary(lm.a1)
lm.a1$a1
lm(BWSb95~BBLandFF)
lm(BWSb95 ~ ., Bruttowertschoepfung)
lm(BWSb95~BBLandFF+BBProdG+BBBau+BBHandGV+BBFinVerm+BBDienstOP, Bruttowertschoepfung)
lm.BWSb95<-lm(BWSb95~BBLandFF+BBProdG+BBBau+BBHandGV+BBFinVerm+BBDienstOP, Bruttowertschoepfung)
summary(lm.BWSb95)
lm.BWSb95<-lm(BWSb95~BBProdG+BBBau+BBHandGV+BBDienstOP, Bruttowertschoepfung)
summary(lm.BWSb95)
lm(BWSb95 ~ ., Bruttowertschoepfung)
plot(Bruttowertschoepfung$BWSb95)
random.numbers <- rnorm(1000, mean=10, sd=5)
ls()
str(random.numbers)
hist(x,
breaks = 50,
freq   = FALSE,
main   = "Gauss-Verteilung")
curve(dnorm(x, mean=10, sd=5), col="red", add=TRUE)
hist(random.numbers,
breaks = 50,
freq   = FALSE,
main   = "Gauss-Verteilung")
curve(dnorm(x, mean=10, sd=5), col="red", add=TRUE)
help(hist)
hist(random.numbers,
breaks = 50,
freq   = FALSE,
main   = "Gauss-Verteilung")
curve(dnorm(random.numbers, mean=10, sd=5), col="red", add=TRUE)
hist(random.numbers,
breaks = 50,
freq   = FALSE,
main   = "Gauss-Verteilung")
curve(dnorm(x, mean=10, sd=5), col="red", add=TRUE)
install.packages('RMySQL',type='source')
help(attach)
SalesOrders <- read.csv("~/programme/data_mining/data/SalesOrders.csv")
View(SalesOrders)
par(mfrow(2,2))
par(mfrow=c(2,2))
names(SalesOrders)
hist(SalesOrders$Kunde)
hist(SalesOrder$LieferDat, "weeks")
hist(SalesOrders$LieferDat, "weeks")
SalesOrders2 <- read.csv("~/programme/data_mining/data/SalesOrders2.csv", sep=";")
View(SalesOrders2)
hist(SalesOrders2$LieferDat, "weeks")
hist(SalesOrders2$LieferDat)
hist(SalesOrders2$LieferDat, "weeks")
help(weeks)
hist(SalesOrders2$Wert)
hist(SalesOrders2$PaymentDuration)
plot(SalesOrders$Kunde, SalesOrders$PaymentDuration)
smoothScatter(SalesOrders$Kunde, SalesOrders$PaymentDuration)
plot(SalesOrders$Kunde, SalesOrders$PaymentDuration)
smoothScatter(SalesOrders$Kunde, SalesOrders$PaymentDuration)
smoothScatter(SalesOrders$Wert, SalesOrders$PaymentDuration)
plot(SalesOrders$Wert, SalesOrders$PaymentDuration, cex=0.3)
par(mfrow=c(2,2))
plot(SalesOrders$Kunde, SalesOrders$PaymentDuration)
smoothScatter(SalesOrders$Kunde, SalesOrders$PaymentDuration)
smoothScatter(SalesOrders$Wert, SalesOrders$PaymentDuration)
plot(SalesOrders$Wert, SalesOrders$PaymentDuration, cex=0.3)
scatterplotMatrix(SalesOrders, diagonal="histogram", cex=0.5, smooth=FALSE, reg.line=FALSE)
library(car)
scatterplotMatrix(SalesOrders, diagonal="histogram", cex=0.5, smooth=FALSE, reg.line=FALSE)
scatterplotMatrix(SalesOrders2, diagonal="histogram", cex=0.5, smooth=FALSE, reg.line=FALSE)
SalesOrders2 <- read.csv("~/programme/data_mining/data/SalesOrders2.csv", sep=";")
View(SalesOrders2)
SalesOrders2 <- read.csv("~/programme/data_mining/data/SalesOrders2.csv", sep=";")
View(SalesOrders2)
scatterplotMatrix(SalesOrders2, diagonal="histogram", cex=0.5, smooth=FALSE, reg.line=FALSE)
SalesOrders <- read.csv("~/programme/data_mining/data/SalesOrders.csv")
View(SalesOrders)
summary(SalesOrders)
scatterplotMatrix(SalesOrders, diagonal="histogram", cex=0.5, smooth=FALSE, reg.line=FALSE)
SalesOrders2 <- read.csv("~/programme/data_mining/data/SalesOrders2.csv", sep=";")
View(SalesOrders2)
SalesOrders2 <- read.csv("~/programme/data_mining/data/SalesOrders2.csv", sep=";")
View(SalesOrders2)
scatterplotMatrix(SalesOrders2, diagonal="histogram", cex=0.5, smooth=FALSE, reg.line=FALSE)
SalesOrders2 <- read.csv("~/programme/data_mining/data/SalesOrders2.csv", sep=";")
View(SalesOrders2)
scatterplotMatrix(SalesOrders2, diagonal="histogram", cex=0.5, smooth=FALSE, reg.line=FALSE)
hist(SalesOrders$TotalValue, prob=T)
car(mfrow=c(1,1))
par(mfrow=c(1,1))
hist(SalesOrders$TotalValue, prob=T)
hist(SalesOrders$TotalValue)
smoothScatter(SalesOrders2$BuyerRef, SalesOrders2$PaymentMade)
plot(SalesOrders2$BuyerRef, SalesOrders2$PaymentMade)
plot(SalesOrders2$BuyerRef, SalesOrders2$PaymentMade, cex=0.2)
hist(SalesOrder2$PaymentMade)
hist(SalesOrders2$PaymentMade)
Pd.ts<-aggregate(x=SalesOrders2$PaymentMade,
by=list(Customer=SalesOrders$BuyerRef), FUN=ts)
Pd.ts<-aggregate(x=SalesOrders2$PaymentMade, by=list(Customer=SalesOrders2$BuyerRef), FUN=ts)
names(Pd.ts) <- c("Customer", "TimeSeries")
str(Pd.ts[1:3,])
Pd.mean        <- sapply(Pd.ts[, "TimeSeries"], FUN=mean)
Pd <- cbind(Pd.ts, Mean=Pd.mean)
Pd <- cbind(Pd, StdDev=sapply(Pd.ts[, "TimeSeries"], FUN=sd))
str(SalesOrders2)
SalesOrders <- read.csv("~/programme/data_mining/data/SalesOrders.csv")
View(SalesOrders)
str(SalesOrders)
str(SalesOrder$DeliveryDate)
str(SalesOrders$DeliveryDate)
x<-rnorm(100)
hist(x)
x<-rnorm(1000)
hist(x)
plot(x)
qqPlot(x)
hist(x)
hist(x, prob=T)
age <- c(1,3,44,2,11,9,3,9,12,3)
hist(age)
plot(age)
hist(age)
library(scatterplot3d)
with(mtcars, {
scatterplot3d(disp, wt, mpg,        # x y and z axis
color="blue", pch=19, # filled blue circles
type="h",             # lines to the horizontal plane
main="3-D Scatterplot Example 2",
xlab="Displacement (cu. in.)",
ylab="Weight (lb/1000)",
zlab="Miles/(US) Gallon")
})
install.packages("scatterplot3d")
library(scatterplot3d)
with(mtcars, {
scatterplot3d(disp, wt, mpg,        # x y and z axis
color="blue", pch=19, # filled blue circles
type="h",             # lines to the horizontal plane
main="3-D Scatterplot Example 2",
xlab="Displacement (cu. in.)",
ylab="Weight (lb/1000)",
zlab="Miles/(US) Gallon")
})
with(mtcars, {
scatterplot3d(disp,   # x axis
wt,     # y axis
mpg,    # z axis
main="3-D Scatterplot Example 1")
})
with(mtcars, {
s3d <- scatterplot3d(disp, wt, mpg,        # x y and z axis
color="blue", pch=19,        # filled blue circles
type="h",                    # vertical lines to the x-y plane
main="3-D Scatterplot Example 3",
xlab="Displacement (cu. in.)",
ylab="Weight (lb/1000)",
zlab="Miles/(US) Gallon")
s3d.coords <- s3d$xyz.convert(disp, wt, mpg) # convert 3D coords to 2D projection
text(s3d.coords$x, s3d.coords$y,             # x and y coordinates
labels=row.names(mtcars),               # text to plot
cex=.5, pos=4)           # shrink text 50% and place to right of points)
})
# create column indicating point color
mtcars$pcolor[mtcars$cyl==4] <- "red"
mtcars$pcolor[mtcars$cyl==6] <- "blue"
mtcars$pcolor[mtcars$cyl==8] <- "darkgreen"
with(mtcars, {
s3d <- scatterplot3d(disp, wt, mpg,        # x y and z axis
color=pcolor, pch=19,        # circle color indicates no. of cylinders
type="h", lty.hplot=2,       # lines to the horizontal plane
scale.y=.75,                 # scale y axis (reduce by 25%)
main="3-D Scatterplot Example 4",
xlab="Displacement (cu. in.)",
ylab="Weight (lb/1000)",
zlab="Miles/(US) Gallon")
s3d.coords <- s3d$xyz.convert(disp, wt, mpg)
text(s3d.coords$x, s3d.coords$y,     # x and y coordinates
labels=row.names(mtcars),       # text to plot
pos=4, cex=.5)                  # shrink text 50% and place to right of points)
# add the legend
legend("topleft", inset=.05,      # location and inset
bty="n", cex=.5,              # suppress legend box, shrink text 50%
title="Number of Cylinders",
c("4", "6", "8"), fill=c("red", "blue", "darkgreen"))
})
library("zoo", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages(c("zoo", "xts"))
library("xts", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("arules");
#load the arules package
library("arules");
WineryData<-read.transactions("/Users/gerd/Dropbox/user_gerd/programme/data_mining/R/WineryShopping/Wine.csv", format="single", rm.duplicates=TRUE, sep=";", cols=c(1,2))
inspect(WineryData)
image(WineryData)
basket_rules <- apriori(WineryData,parameter = list(sup = 0.1, conf = 0.4,target="rules"));
inspect(basket_rules)
source('~/Dropbox/user_gerd/programme/data_mining/R/WineryShopping/WinerySource.R')
install.packages("arules")
install.packages("arules")
install.packages("arules")
summary(basket_rules)
inspect(basket_rules)
source('~/Dropbox/user_gerd/programme/data_mining/R/WineryShopping/WinerySource.R')
install.packages("arules")
WineryData<-read.transactions("/Users/gerd/Dropbox/user_gerd/programme/data_mining/R/WineryShopping/Wine.csv", format="single", rm.duplicates=TRUE, sep=";", cols=c(1,2))
inspect(WineryData)
basket_rules <- apriori(WineryData,parameter = list(sup = 0.1, conf = 0.4,target="rules"));
apriori?
;
?apriori
find_rtools()
library("arules");
install.packages("arules");
