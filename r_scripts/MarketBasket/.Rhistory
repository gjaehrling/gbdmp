library(RMySQL)
con<-dbConnect(dbDriver("MySQL"), user="root", password="darmstadt", dbname="bestellungen")
dbListTables(con)
res<-dbSendQuery(con, "select concat(auftrag, position) as "auftrag", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc limit 10;")
res<-dbSendQuery(con, "select concatauftrag, position) as \"auftrag\", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc limit 10;")
res<-dbSendQuery(con, "select concat(auftrag, position) as \"auftrag\", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc limit 10;")
SalesData<- fetch(res, n = -1)
summary(SalesData)
res<-dbSendQuery(con, "select concat(auftrag, position) as \"auftrag\", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag ascs;")
res<-dbSendQuery(con, "select concat(auftrag, position) as \"auftrag\", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc limit 10;")
res<-dbSendQuery(con, "select concat(auftrag, position) as \"auftrag\", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc limit 1000;")
res<-dbSendQuery(con, "select concat(auftrag, position) as \"auftrag\", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc ;")
res<-dbSendQuery(con, "select concat(auftrag, position) as \"auftrag\", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc;")
basket_rules <- apriori(SalsData,parameter = list(sup = 0.5, conf = 0.9,target=”rules”));
basket_rules <- apriori(SalsData,parameter = list(sup = 0.5, conf = 0.9,target="rules"));
install.packages(“arules”);
install.packages("arules");
library("arules");
basket_rules <- apriori(SalsData,parameter = list(sup = 0.5, conf = 0.9,target="rules"));
basket_rules <- apriori(SalesData,parameter = list(sup = 0.5, conf = 0.9,target="rules"));
str(SalesData)
library("arules");
# connect to MySQL database
con<-dbConnect(dbDriver("MySQL"), user="root", password="darmstadt", dbname="bestellungen")
# list the tables in the database
dbListTables(con)
# get results from query:
# res<-dbSendQuery(con, "select concat(auftrag, position) as \"auftrag\", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc;")
res<-dbSendQuery(con, "select auftrag, artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc;")
SalesData<- fetch(res, n = -1)
# show summary:
summary(SalesData)
# show structure
str(SalesData)
SalesData$auftrag<-as.factor(SalesData$auftrag)
SalesData$artikel<-as.factor(SalesData$artikel)
SalesData$artikelbezeichnung<-as.factor(SalesData$artikelbezeichnung)
str(SalesData)
View(SalesData)
# Market Basket
basket_rules <- apriori(SalesData,parameter = list(sup = 0.5, conf = 0.9,target="rules"));
basket_rules <- apriori(SalesData,parameter = list(sup = 0.1, conf = 0.8,target="rules"));
basket_rules <- apriori(SalesData,parameter = list(sup = 0.1, conf = 0.7,target="rules"));
basket_rules <- apriori(SalesData,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
basket_rules <- apriori(SalesData,parameter = list(sup = 0.9, conf = 0.1,target="rules"));
res<-dbSendQuery(con, "select kunde, artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc;")
res<-dbSendQuery(con, "select kunde, artikel, artikelbezeichnung from auftrag, bestellung, artikel where auftnr=auftrag and artikel=artikelnr order by auftrag asc;")
SalesData<- fetch(res, n = -1)
# show summary:
summary(SalesData)
# show structure
str(SalesData)
res<-dbSendQuery(con, "select kunde, artikel, artikelbezeichnung from auftrag, bestellung, artikel where auftnr=auftrag and artikel=artikelnr and kunde != NULL order by auftrag asc;")
SalesData<- fetch(res, n = -1)
# show summary:
summary(SalesData)
# show structure
str(SalesData)
res<-dbSendQuery(con, "select kunde, artikel, artikelbezeichnung from auftrag, bestellung, artikel where auftnr=auftrag and artikel=artikelnr and kunde IS NOT NULL order by auftrag asc;")
SalesData<- fetch(res, n = -1)
# show summary:
summary(SalesData)
# show structure
str(SalesData)
SalesData$auftrag<-as.factor(SalesData$auftrag)
SalesData$kunde<-as.factor(SalesData$kunde)
SalesData$artikel<-as.factor(SalesData$artikel)
SalesData$artikelbezeichnung<-as.factor(SalesData$artikelbezeichnung)
str(SalesData)
View(SalesData)
# Market Basket
basket_rules <- apriori(SalesData,parameter = list(sup = 0.1, conf = 0.8,target="rules"));
basket_rules <- apriori(SalesData,parameter = list(sup = 0.5, conf = 0.5,target="rules"));
inspect(basket_rules)
itemFrequencyPlot(SalesData)
itemFrequencyPlot(SalesData)
con<-dbConnect(dbDriver("MySQL"), user="root", password="darmstadt", dbname="bestellungen")
# list the tables in the database
dbListTables(con)
# get results from query:
# concatenating auftrag and position
# res<-dbSendQuery(con, "select concat(auftrag, position) as \"auftrag\", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc;")
# res<-dbSendQuery(con, "select auftrag, artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc;")
res<-dbSendQuery(con, "select kunde, artikel, artikelbezeichnung from auftrag, bestellung, artikel where auftnr=auftrag and artikel=artikelnr and kunde IS NOT NULL order by auftrag asc;")
SalesData<- fetch(res, n = -1)
# show summary:
summary(SalesData)
# show structure
str(SalesData)
#SalesData$auftrag<-as.factor(SalesData$auftrag)
SalesData$kunde<-as.factor(SalesData$kunde)
SalesData$artikel<-as.factor(SalesData$artikel)
SalesData$artikelbezeichnung<-as.factor(SalesData$artikelbezeichnung)
str(SalesData)
View(SalesData)
basket_rules <- apriori(SalesData,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
res<-dbSendQuery(con, "select kunde, artikel from auftrag, bestellung, artikel where auftnr=auftrag and artikel=artikelnr and kunde IS NOT NULL order by auftrag asc;")
SalesData<- fetch(res, n = -1)
# show summary:
summary(SalesData)
# show structure
str(SalesData)
#SalesData$auftrag<-as.factor(SalesData$auftrag)
SalesData$kunde<-as.factor(SalesData$kunde)
SalesData$artikel<-as.factor(SalesData$artikel)
str(SalesData)
View(SalesData)
basket_rules <- apriori(SalesData,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
basket_rules <- apriori(-ts,SalesData,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
basket_rules <- apriori[-ts](SalesData,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
basket_rules <- apriori(SalesData,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
inspect(basket_rules)
SalesData<-read.transactions(SalesData, rm.duplicates= FALSE, format="single",sep=";",cols =c(1,2))
library("arules");
# connect to MySQL database
con<-dbConnect(dbDriver("MySQL"), user="root", password="darmstadt", dbname="bestellungen")
# list the tables in the database
dbListTables(con)
# get results from query:
# concatenating auftrag and position
# res<-dbSendQuery(con, "select concat(auftrag, position) as \"auftrag\", artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc;")
# res<-dbSendQuery(con, "select auftrag, artikel, artikelbezeichnung from bestellung, artikel where artikel=artikelnr order by auftrag asc;")
# res<-dbSendQuery(con, "select kunde, artikel, artikelbezeichnung from auftrag, bestellung, artikel where auftnr=auftrag and artikel=artikelnr and kunde IS NOT NULL order by auftrag asc;")
res<-dbSendQuery(con, "select kunde, artikel from auftrag, bestellung, artikel where auftnr=auftrag and artikel=artikelnr and kunde IS NOT NULL order by auftrag asc;")
SalesData<- fetch(res, n = -1)
SalesData<-read.transactions(SalesData, rm.duplicates= FALSE, format="single",sep=";",cols =c(1,2))
SalesData<-read.transactions(con, rm.duplicates= FALSE, format="single",sep=";",cols =c(1,2))
SalesData<-read.transactions("con", rm.duplicates= FALSE, format="single",sep=";",cols =c(1,2))
SalesData<-read.transactions(dbConnect(dbDriver("MySQL"), user="root", password="darmstadt", dbname="bestellungen"), rm.duplicates= FALSE, format="single",sep=";",cols =c(1,2))
SalesData<-read.transactions("dbConnect(dbDriver("MySQL"), user="root", password="darmstadt", dbname="bestellungen")", rm.duplicates= FALSE, format="single",sep=";",cols =c(1,2))
res<-dbSendQuery(con, "select kunde, artikel from auftrag, bestellung, artikel where auftnr=auftrag and artikel=artikelnr and kunde IS NOT NULL order by auftrag asc;")
SalesData<- fetch(res, n = -1)
# show summary:
summary(SalesData)
# show structure
str(SalesData)
#SalesData$auftrag<-as.factor(SalesData$auftrag)
SalesData$kunde<-as.factor(SalesData$kunde)
SalesData$artikel<-as.factor(SalesData$artikel)
str(SalesData)
View(SalesData)
basket_rules <- apriori(SalesData,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
MarketBasket<-read.transactions("MarketBasket.csv", rm.duplicates=FALSE, format="single", sep=",", cols=c(1,2))
MarketBasket<-read.transactions("MarketBasket.csv", rm.duplicates=TRUE, format="single", sep=",", cols=c(1,2))
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
MarketBasket<-read.transactions("MarketBasket.csv", rm.duplicates=TRUE, format="basket", sep=",", cols=c(1,2))
MarketBasket<-read.transactions("MarketBasket.csv", rm.duplicates=TRUE, format="single", sep=",")
MarketBasket<-read.transactions("MarketBasket.csv", rm.duplicates=TRUE, format="single", sep=",", cols=c(1,3))
# Market Basket
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
# Check the generated rules using inspect
inspect(basket_rules)
itemFrequencyPlot(MarketBasket)
MarketBasket<-read.transactions("MarketBasket2.csv", rm.duplicates=TRUE, format="single", sep=",", cols=c(1,3))
MarketBasket<-read.transactions("MarketBasket2.csv", rm.duplicates=TRUE, format="single", sep=",", cols=c(1,2))
MarketBasket<-read.transactions("MarketBasket2.csv", rm.duplicates=FALSE, format="single", sep=",", cols=c(1,2))
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.8,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.7,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.6,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.5,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.4,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.3,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.2,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.1,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.4, conf = 0.1,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.3, conf = 0.1,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.2, conf = 0.1,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
MarketBasket<-read.transactions("MarketBasket2.csv", rm.duplicates=FALSE, format="single", sep=";", cols=c(1,2))
MarketBasket<-read.transactions("MarketBasket2.csv", rm.duplicates=TRUE, format="single", sep=";", cols=c(1,2))
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.5,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.3,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.2,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
inspect(MarketBasket)
MarketBasket<-read.transactions("Orders.csv", rm.duplicates=TRUE, format="single", sep=";", cols=c(1,2))
MarketBasket<-read.transactions("Orders.csv", rm.duplicates=FALSE, format="single", sep=";", cols=c(1,2))
MarketBasket<-read.transactions("Orders.csv", rm.duplicates=TRUE, format="single", sep=";", cols=c(1,3))
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.8,target="rules"));
summary(MarketBasket)
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.7,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.5,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.4,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.4,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.3,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.2,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
MarketBasket<-read.transactions("Orders2.csv", rm.duplicates=TRUE, format="single", sep=";", cols=c(1,4))
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
MarketBasket<-read.transactions("Orders2.csv", rm.duplicates=TRUE, format="single", sep=",", cols=c(1,4))
summary(MarketBasket)
# Market Basket
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.5,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.5,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.8,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.8, conf = 0.8,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.8, conf = 0.9,target="rules"));
# Check the generated rules using inspect
inspect(basket_rules)
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.9, conf = 0.9,target="rules"));
MarketBasket<-read.transactions("Orders.csv", rm.duplicates=TRUE, format="single", sep=",", cols=c(1,4))
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.9, conf = 0.9,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
source('~/programme/data_mining/R/MarketBasket/MarketBasket.R')
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.3,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.2, conf = 0.2,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.2,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.2,target="rules"));
source('~/.active-rstudio-document')
MarketBasket<-read.transactions("film_analysis.csv", rm.duplicates=TRUE, format="single", sep=",", cols=c(1,2))
inspect(MarketBasket)
MarketBasket<-read.transactions("film_analysis_2.csv", rm.duplicates=TRUE, format="single", sep=",", cols=c(1,2))
MarketBasket<-read.transactions("film_analysis_2.csv", rm.duplicates=TRUE, format="single", sep=";", cols=c(1,2))
inspect(MarketBasket)
summary(MarketBasket)
# Market Basket
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
# Check the generated rules using inspect
inspect(basket_rules)
MarketBasket<-read.transactions("Orders2.csv", rm.duplicates=TRUE, format="single", sep=",", cols=c(1,4))
inspect(MarketBasket)
summary(MarketBasket)
# Market Basket
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.5,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.9,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.9, conf = 0.9,target="rules"));
# Check the generated rules using inspect
inspect(basket_rules)
basket_rules <- apriori(MarketBasket,parameter = list(sup = 1.0, conf = 0.9,target="rules"));
# Check the generated rules using inspect
inspect(basket_rules)
MarketBasket<-read.transactions("Orders2.csv", rm.duplicates=TRUE, format="single", sep=",", cols=c(1,2))
inspect(MarketBasket)
summary(MarketBasket)
# Market Basket
basket_rules <- apriori(MarketBasket,parameter = list(sup = 1.0, conf = 0.9,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.5, conf = 0.9,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
MarketBasket<-read.transactions("Orders2.csv", rm.duplicates=TRUE, format="single", sep=";", cols=c(1,2))
inspect(MarketBasket)
summary(MarketBasket)
# Market Basket
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.9, conf = 0.9,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 1.9, conf = 0.9,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 1.0, conf = 0.9,target="rules"));
# Check the generated rules using inspect
inspect(basket_rules)
basket_rules <- apriori(MarketBasket,parameter = list(sup = 1.0, conf = 0.8,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 1.0, conf = 0.7,target="rules"));
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.9, conf = 0.7,target="rules"));
# Check the generated rules using inspect
inspect(basket_rules)
basket_rules <- apriori(MarketBasket,parameter = list(sup = 1.0, conf = 1.0,target="rules"));
# Check the generated rules using inspect
inspect(basket_rules)
source('~/programme/data_mining/R/MarketBasket/MarketBasket.R', echo=TRUE)
install.packages("shiny")
summary(MarketBasket)
# Market Basket
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
# Check the generated rules using inspect
inspect(basket_rules)
library("arules");
install.packages("arules")
library("arules");
MarketBasket<-read.transactions("film_analysis_2.csv", rm.duplicates=TRUE, format="single", sep=";", cols=c(1,2))
inspect(MarketBasket)
summary(MarketBasket)
# Market Basket
basket_rules <- apriori(MarketBasket,parameter = list(sup = 0.1, conf = 0.1,target="rules"));
# Check the generated rules using inspect
inspect(basket_rules)
