summary(subset(pf$www_likes, gender = "Male")
)
summary(subset(pf$www_likes, gender = "Male"))
test<-subset(pf$www_likes, gender = "Male"))
test<-subset(pf$www_likes, gender = "Male")
test<-subset(pf$www_likes, is.gender("Male")
)
test<-subset(pf$www_likes, gender == "Male")
test<-subset(pf, gender == "Male")
summary(test)
summary(test$www_likes)
test<-subset(pf, gender == "male")
summary(test)
summary(test$www_likes)
test<-subset(pf, gender == "female")
summary(test$www_likes)
table(pf$www_likes)
by(pf$gender, summary)
by(pf$www_likes, pf$gender, summary)
by(pf$www_likes, pf$gender, sum)
by(pf$www_likes, pf$gender, sum)
qplot(x = gender, y = www_likes,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender)
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender)
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender) +
scale_y_continuous(lim=c(20,1500), breaks = seq(20,1500,100))
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender) +
scale_y_continuous(lim=c(0,1000), breaks = seq(0,1000,100))
option1 <- qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender, ylim = 1000)
option1 <- qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender, ylim = c(0,1000))
option3 <- qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender) +
coord_cartesian(ylim=c(0,1000))
grid.arrange(option1, option2, option3, ncols=1)
option1 <- qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender, ylim = c(0,1000))
option2 <- qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender) +
scale_y_continuous(lim=c(0,1000), breaks = seq(0,1000,100))
option3 <- qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender) +
coord_cartesian(ylim=c(0,1000))
grid.arrange(option1, option2, option3, ncols=1)
grid.arrange(option1, option2, option3, ncol=1)
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender) +
coord_cartesian(ylim=c(0,250))
by(pf$friend_count, pf$gender, summary)
names(pf)
qplot(x = gender, y = friendship_initiated,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender) +
coord_cartesian(ylim=c(0,250))
by(pf$friendship_initiated, pf$gender, summary)
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom='boxplot', color = gender) +
coord_cartesian(ylim=c(0,250))
by(pf$friendships_initiated, pf$gender, summary)
names(pf)
summary(pf$mobile_likes)
summary(pf$mobile_likes > 0)
mobile_check_in <- NA
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0, 1, 0)
names(pf)
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
pf$mobile_check_in
pf$mobile_check_in.Count
sum(pf$mobile_check_in.Count)
count(subset(pf, pf$mobile_check_in = 0))
count(subset(pf, pf$mobile_check_in = 0)))
count(subset(pf, pf$mobile_check_in = 0))
n<-subset(pf, pf$mobile_check_in = 0))
n<-subset(pf, pf$mobile_check_in == 0))
n<-subset(pf, pf$mobile_check_in == '0'))
n<-subset(pf, pf$mobile_check_in == '0')
count(n)
n.count
summary(n)
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(plyr)
count(n)
summary(pf$mobile_check_in)
by(pf$mobile_check_in)
by(pf, pf$mobile_check_in == '0', sum)
by(pf, pf$mobile_check_in == 0, sum)
summary(pf$mobile_check_in)
sum(pf$mobile_check_in == 1 / length(pf$mobile_check_in)
)
sum(pf$mobile_check_in == 1) / length(pf$mobile_check_in)
#table(pf$www_likes)
by(pf$www_likes, pf$gender, sum)
source('~/programme/data_mining/R/Udacity/udacity_course.R', echo=TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
source('~/programme/data_mining/R/Udacity/udacity_course.R', echo=TRUE)
install.packages("ggplot2")
data(diamonds)
library(ggplot)
library(ggplot2)
data(diamonds)
summary(diamonds)
names(diamonds)
View(diamonds)
?diamonds
typeof(diamonds)
typeof(diamonds$carat)
typeof(diamonds$cut)
typeof(diamonds$color)
typeof(diamonds$clarity)
typeof(diamonds$depth)
typeof(diamonds$table)
typeof(diamonds$x)
typeof(diamonds$y)
typeof(diamonds$z)
str(diamonds)
names(diamonds)
qplot(x = price, data = diamonds)
qplot(x = price, data = diamonds) +
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,50))
qplot(x = price, data = diamonds, binwidth = 50) +
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,50))
qplot(x = price, data = diamonds, binwidth = 100) +
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,50))
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,100))
qplot(x = price, data = diamonds, binwidth = 100) +
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,100))
qplot(x = price, data = diamonds, binwidth = 100) +
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,500))
summary(diamonds$price)
count(subset(diamonds$price > 15000))
nrow(subset(diamonds$price > 15000))
nrow(subset(diamonds, diamonds$price > 15000))
nrow(subset(diamonds, diamonds$price < 500))
nrow(subset(diamonds, diamonds$price < 250))
nrow(subset(diamonds, diamonds$price >= 15000))
qplot(x = price, data = diamonds, binwidth = 100)
library(qqplot2)
library(qplot)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
qplot(x = price, data = diamonds)
qplot(x = price, data = diamonds) +
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,50))
qplot(x = price, data = diamonds, binwidth = 50) +
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,50))
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,100))
qplot(x = price, data = diamonds, binwidth = 100) +
qplot(x = price, data = diamonds, binwidth = 100) +
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,500))
qplot(x = price, data = diamonds, binwidth = 100) +
scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,500))
qplot(x = price, data = diamonds, binwidth = 100) +
+ scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,500)) +
facet(cut)
qplot(x = price, data = diamonds, binwidth = 100) +
+ scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,500))
qplot(x = price, data = diamonds, binwidth = 100) + scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,500)) +
facet(cut)
qplot(x = price, data = diamonds, binwidth = 100) +
facet(cut)
qplot(x = price, data = diamonds, binwidth = 100)
qplot(x = price, data = diamonds, binwidth = 100) +
facet_grid(~cut)
summary(diamonds$price)
sapply(diamonds, cut)
sapply(diamonds, cut, na.rm = TRUE)
sapply(diamonds, price)
sapply(diamonds, cut)
sapply(diamonds, cut, na.rm = TRUE)
by(diamonds, cut)
tapply(diamonds$pric, diamonds$cut, summary)
tapply(diamonds$price, diamonds$cut, summary)
by(diamonds, cut, summary)
by(diamonds$price, diamonds$cut, summary)
by(diamonds$price, diamonds$cut, max)
by(diamonds$price, diamonds$cut, low)
by(diamonds$price, diamonds$cut, median)
by(diamonds$price, diamonds$cut, low)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
library(qqplot2)
library("qqplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("gplots", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(qqplot2)
library("qqplot2")
library(ggplot2)
data(diamonds)
summary(diamonds)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
diamonds$cut
summary(diamonds$cut)
by(diamonds, cut, summary)
by(diamonds$price, diamonds$cut, summary)
qplot(x = price, data = diamonds, binwidth = 0.25) + facet_wrap(~cut)
qplot(x = price, data = diamonds, binwidth = 100) + facet_wrap(~cut)
qplot(x = price, data = diamonds, binwidth = 100) + facet_wrap(~cut, scales = "free_y")
```{r fig.width=7, fig.height=6}
packages('ggplot2')
package('ggplot2')
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
names(diamonds)
qplot(x = price, y = carat, data = diamonds, binwidth = 100) + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 100) + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 100) + facet_wrap(~cut, scales = "free_y") +  scale_x_log10()
qplot(x = price / carat, data = diamonds, binwidth = 500, scale_x_log10()) + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 500) + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 500) + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 500) + scale_x_log10()
qplot(x = price/carat, data = diamonds, binwidth = 50) +
geom_histogram() +
facet_wrap(~cut, ncol=3, scale = "free") +
scale_x_log10() +
scale_x_continuous(limits=c(250,10000), breaks=seq(0,8000,4000))
qplot(x = price/carat, data = diamonds, binwidth = 100) +
geom_histogram() +
facet_wrap(~cut, ncol=3, scale = "free") +
scale_x_log10() +
scale_x_continuous(limits=c(250,10000), breaks=seq(0,8000,4000))
qplot(x = price/carat, data = diamonds, binwidth = 100) +
geom_histogram() +
facet_wrap(~cut, ncol=3, scale = "free") +
scale_x_log10()
qplot(x = price/carat, data = diamonds, binwidth = 0.05) + facet_wrap(~cut) + scale_x_log10()
qplot(x = price/carat, data = diamonds, binwidth = 10) + facet_wrap(~cut) + scale_x_log10()
qplot(x = price/carat, data = diamonds, binwidth = 0.1) + facet_wrap(~cut) + scale_x_log10()
qplot(x = price/carat, data = diamonds, binwidth = 0.05) + facet_wrap(~cut) + scale_x_log10()
qplot(x = price / carat, data = diamonds, binwidth = 500) + scale_x_log10()
qplot(x = price / carat, data = diamonds, binwidth = 1) + scale_x_log10()
qplot(x = price / carat, data = diamonds, binwidth = 0.01) + scale_x_log10()
qplot(x = price / carat, data = diamonds, binwidth = 0.01) + scale_x_log10() + facet_wrap(~cut)
qplot(x = price / carat, data = diamonds, binwidth = 0.05) + scale_x_log10() + facet_wrap(~cut)
qplot(x = price / carat, data = diamonds, binwidth = 0.05) + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.02) + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.03) + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.05) + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.05) + scale_x_log10() + facet_wrap(~cut, scales = "free_y") + scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,50))
qplot(x = price / carat, data = diamonds, binwidth = 0.05) + scale_x_log10() + facet_wrap(~cut, scales = "free_y") + scale_x_continuous(limits = c(0,100), breaks = seq(0,100,50))
qplot(x = price / carat, data = diamonds, binwidth = 0.05) + scale_x_log10() + facet_wrap(~cut, scales = "free_y") + scale_x_continuous(limits = c(0,10), breaks = seq(0,10,5))
qplot(x = price / carat, data = diamonds, binwidth = 0.05) + genom_histogramm() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.05) + genom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.05) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 10) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.1) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = gender) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = cut) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = gender) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y") + scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,50))
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = cut) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y") + scale_x_continuous(limits = c(0,10000), breaks = seq(0,10000,50))
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = cut) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y") + scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50))
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = cut) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y") + scale_x_continuous(limits = c(0,1), breaks = seq(0,1,0.2))
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = cut, geom='freqpoly') + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = cut) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = cut) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
```
library(ggplot2)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
qplot(x = price, data = diamonds, binwidth = 100) + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = cut) + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = cut, geom='freqpoly') + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
tmp <- installed.packages()
tmp
install.packages('ggplot2')
library(ggplot2)
install.packages("knitr")
qplot(x = price / carat, data = diamonds, binwidth = 0.1, color = cut, geom='freqpoly') + geom_histogram() + scale_x_log10() + facet_wrap(~cut, scales = "free_y")
install.packages('ggplot2')
library(ggplot2)
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(gender)),
geom='boxplot', color = cut) +
coord_cartesian(ylim=c(0,100))
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(price)),
geom='boxplot', color = cut) +
coord_cartesian(ylim=c(0,100))
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(price)),
geom='boxplot', color = cut)
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(price)),
geom='boxplot', color = cut) +
coord_cartesian(ylim=c(0,10000))
summary(diamonds$cut)
summary(diamonds$clarity)
summary(diamonds$color)
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(price)),
geom='boxplot', color = cut) +
coord_cartesian(ylim=c(0,10000))
install.packages('ggplot2')
library(ggplot2)
summary(diamonds$cut)
summary(diamonds$clarity)
summary(diamonds$color)
qplot(x = cut, y = price,
data = subset(diamonds, !is.na(price)),
geom='boxplot', color = cut) +
coord_cartesian(ylim=c(0,10000))
plot(x = color, y = price,
data = subset(diamonds, !is.na(price)),
geom='boxplot', color = cut) +
coord_cartesian(ylim=c(0,10000))
qplot(x = color, y = price,
data = subset(diamonds, !is.na(price)),
geom='boxplot', color = cut) +
coord_cartesian(ylim=c(0,10000))
qplot(x = color, y = price,
data = subset(diamonds, !is.na(price)),
geom='boxplot', color = color) +
coord_cartesian(ylim=c(0,10000))
by(diamonds$price, diamonds$color, summary)
IQR(subset(diamonds, color == 'D')$price)
IQR(subset(diamonds, color == 'G')$price)
factor(diamonds)
factor(diamonds$color)
summary(diamonds$color)
by(diamonds$price, diamonds$color, summary)
IQR(subset(diamonds, color == 'G')$price)
IQR(subset(diamonds, color == 'G')$color)
IQR(subset(diamonds, color == 'G')$price)
IQR(subset(diamonds, color == 'J')$price)
IQR(subset(diamonds, color == 'D')$price)
qplot(y = price/carat, x = color, data = diamonds,
geom = 'boxplot') +
facet_wrap(~color, ncol=3, scale = "free")
qplot(y = price/carat, x = color, data = diamonds,
geom = 'boxplot', color = color)
qplot(y = price/carat, x = color, data = diamonds,
geom = 'boxplot', color = carat)
qplot(y = price/carat, x = color, data = diamonds,
geom = 'boxplot', color = color)
qplot(y = price/carat, x = color, data = diamonds,
geom = 'boxplot', color = color) +
coord_cartesian(ylim=c(0,10000))
qplot(y = price/carat, x = color, data = diamonds,
geom = 'boxplot', fill = color) +
coord_cartesian(ylim=c(0,10000))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1)
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, ylim=2000)
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, ylim==2000)
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 1)
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1)
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), ylim = c(2000,12000)
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), ylim = c(3000,12000)
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), ylim = c(2000,12000))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), ylim = c(2000,12000), breaks = seq(0,3,0.1))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), ylim = c(2000,12000), breaks = seq(0,3,0.1))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), breaks = seq(0,3,0.1))
qplot(x = friend_count, data = pf, binwidth = 25) +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), breaks = seq(0,3,0.5))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), breaks = seq(0,3,0.1))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), breaks = seq(0,3,0.05))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), breaks = seq(0,3,0.01))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1, xlim = c(0,3), breaks = seq(0,3,0.01)) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
scale_y_continuous(limits = c(2000,12000), breaks = seq(2000,12000,50))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
scale_y_continuous(limits = c(2000,12000), breaks = seq(2000,12000,1000))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
scale_y_continuous(limits = c(0,12000), breaks = seq(0,12000,1000))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1) +
scale_x_continuous(limits = c(0,5), breaks = seq(0,5,0.10)) +
scale_y_continuous(limits = c(0,12000), breaks = seq(0,12000,1000))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
scale_y_continuous(limits = c(0,12000), breaks = seq(0,12000,1000))
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
scale_y_continuous(limits = c(0,12000), breaks = seq(0,12000,1000))+
geom_abline(intercept = 2000, slope = 0, color = 'red', size = 1, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
scale_y_continuous(limits = c(0,12000), breaks = seq(0,12000,1000))+
geom_abline(intercept = 2000, slope = 0, color = 'red', size = 1, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.1) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
scale_y_continuous(limits = c(0,12000), breaks = seq(0,12000,1000))+
geom_abline(intercept = 2000, slope = 0, color = 'red', size = 1, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
scale_y_continuous(limits = c(0,12000), breaks = seq(0,12000,1000))+
geom_abline(intercept = 2000, slope = 0, color = 'red', size = 1, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10))
geom_abline(intercept = 2000, slope = 0, color = 'red', size = 1, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
geom_abline(intercept = 2000, slope = 0, color = 'red', size = 1, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
geom_abline(intercept = 2000, slope = 0, color = 'blue', size = 0.5, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01) +
scale_x_continuous(limits = c(0,5), breaks = seq(0,5,0.10)) +
geom_abline(intercept = 2000, slope = 0, color = 'blue', size = 0.5, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,3,0.10)) +
geom_abline(intercept = 2000, slope = 0, color = 'blue', size = 0.5, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01) +
scale_x_continuous(limits = c(0,2.5), breaks = seq(0,2.5,0.10)) +
geom_abline(intercept = 2000, slope = 0, color = 'blue', size = 0.5, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01) +
scale_x_continuous(limits = c(0,2.5), breaks = seq(0,2.5,0.05)) +
geom_abline(intercept = 2000, slope = 0, color = 'blue', size = 0.5, lty = 'dashed')
qplot(carat, data = diamonds, geom = "freqpoly", binwidth = 0.01) +
scale_x_continuous(limits = c(0,2.5), breaks = seq(0,2.5,0.1)) +
geom_abline(intercept = 2000, slope = 0, color = 'blue', size = 0.5, lty = 'dashed')
getwd()
setwd('Users/gerd/programme/data_mining/R/Udacity')
getwd()
# Vorbereitungen
library(car)
library(mclust)
# Einlesen der Daten aus der CSV-Datei
SalesOrdersHeise <- read.csv("~/programme/data_mining/R/SalesOrdersHeise/SalesOrdersHeise.csv", sep=";", stringsAsFactor=FALSE)
SalesOrdersHeise <- read.csv("SalesOrdersHeise.csv", sep=";", stringsAsFactor=FALSE)
# Anzeige der Struktur
str(SalesOrdersHeise)
# Konvertierung des Felds 'DeliveryDate' vom character nach date
SalesOrdersHeise$DeliveryDate<-as.Date(SalesOrdersHeise$DeliveryDate, format="%Y-%m-%d")
# Überprüfen der Struktur
str(SalesOrdersHeise)
# Teile das Ausgabefenster in eine 2,2 Felder Matrix
par(mfrow=c(2,2))
# Spaltennamen zuweisen
attach(SalesOrdersHeise)
# Spaltennamen ausgeben
names(SalesOrdersHeise)
# Histogramme
hist(BuyerRef)
hist(DeliveryDate, "weeks")
hist(TotalPrice)
hist(PaymentDuration, main="Zahlungsverhalten")
lines(density(PaymentDuration, na.rm=T))
rug(jitter(PaymentDuration))
par(mfrow=c(1,1))
qqPlot(PaymentDuration, main="Zahlungsverhalten QQ Plot")
# 2-dimensionale Korrelationsplots
par(mfrow=c(2,2))
plot(BuyerRef, PaymentDuration)
smoothScatter(BuyerRef, PaymentDuration)
smoothScatter(TotalPrice, PaymentDuration)
plot(TotalPrice, PaymentDuration, cex=0.3)
scatterplotMatrix(SalesOrdersHeise, diagonal="histogram", cex=0.5,smooth=FALSE, reg.line=FALSE)
# erzeuge die Zeitreihe für die Zahlungshistorie der Kunden
Pd.ts<-aggregate(x=SalesOrdersHeise$PaymentDuration, by=list(Customer=SalesOrdersHeise$BuyerRef), FUN=ts)
names(Pd.ts)<-c("Customer", "TimeSeries")
str(Pd.ts[1:3,])
# Durchschnittswert der Tage pro Kunde
Pd.mean<-sapply(Pd.ts[, "TimeSeries"], FUN=mean)
# Zusammenfügen des Vektors "Pd.mean" zu dem TimeSeries Data-Frames mit "cbind"
Pd<-cbind(Pd.ts, Mean=Pd.mean)
# Beispiel zur Kombination der beiden Befehle beim Hinzufügen des Wertes zur Standardabweichung
Pd<-cbind(Pd, StdDev=sapply(Pd.ts[, "TimeSeries"], FUN=sd))
# Hinzufügen der Anzahl Verkaufsaufträge zum TimeSeries Data-Frame
Pd.nr<-aggregate(x=SalesOrdersHeise$PaymentDuration,
by=list(Customer=SalesOrdersHeise$BuyerRef), FUN=length)
names(Pd.nr)<-c("Customer", "NrDel")
# Verbinden der beiden Data-frames
Pd<-merge(Pd, Pd.nr)
str(Pd)
# Umsortieren der Spalten
Pd <- Pd[, c(1,3,4,5,2)]
str(Pd[1:3,])
# Clusteranalyse mit Mclust
cl.m <- Mclust(Pd[,2:4])
# Ausgabe der Cluster-Zentren
cl.m$parameters$mean
# Ausgabe des Clusters
par(mfrow=c(1,1))
plot(cl.m, Pd[,2:4], dimens=c(1:2),what=c("classification"))
